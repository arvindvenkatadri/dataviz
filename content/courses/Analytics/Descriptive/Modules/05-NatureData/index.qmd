---
title: <iconify-icon icon="icon-park-twotone:data-user" width="1.2em" height="1.2em"></iconify-icon> Data
subtitle: "Where does Data come from, what does it look like"
date: 2021-11-01
date-modified: "`r Sys.Date()`"
order: 05
fig-cap-location: bottom
image: preview.png
image-alt: By Rudityas on Glazestock.com
categories: 
  - Scientific Inquiry
  - Experiments
  - Observations
  - Nature of Data
  - Experience
  - Measurement
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
webr:
  packages: ['readr', 'dplyr','mosaic', 'skimr', 'ggformula', 'palmerpenguins', 'Lock5withR']
---

## {{< iconify mdi web-check >}} Using web-R

This tutorial uses `web-r` that allows you to run all code within your
browser, on all devices. Most code chunks herein are formatted in a
tabbed structure ( like in an old-fashioned library) with duplicated
code. The tabs in front have regular R code that will work when
copy-pasted in your RStudio session. The tab "behind" has the `web-R`
code that can work directly in your browser, and can be modified as
well. The R code is also there to make sure you have original code to go
back to, when you have made several modifications to the code on the
`web-r` tabs and need to compare your code with the original!

#### Keyboard Shortcuts

-   Run selected code using either:
    -   macOS: <kbd>⌘</kbd> + <kbd>↩/Return</kbd>
    -   Windows/Linux: <kbd>Ctrl</kbd> + <kbd>↩/Enter</kbd>
-   Run the entire code by clicking the "Run code" button or pressing <kbd>Shift</kbd>+<kbd>↩</kbd>.

::: callout-important
## Click on any Picture to Zoom

All embedded **figures** are displayed full-screen when clicked.
:::

::: pa4
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["Difficulties strengthen the mind, as labor does the body."]{.f5 .f4-m
.f3-l .lh-copy .measure .mt0}

[--- Seneca]{.f6 .ttu .tracked .fs-normal}
:::
:::

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: false
#| warning: false
library(tidyverse) # Data processing with tidy principles
library(mosaic) # Our go-to package for almost everything

# devtools::install_github("rpruim/Lock5withR")
library(Lock5withR)
library(Lock5Data) # Some neat little datasets from a lovely textbook
library(kableExtra)

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(TeachHist)
library(TeachingDemos)
library(grateful)
library(plotly)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files
```


```{r}
#| label: themes-and-colours
#| eval: false
#| echo: false
library(ggthemr)
library(ggsci)
library(paletteer)
# Chunk options
knitr::opts_chunk$set(
 fig.width = 7,
 fig.asp = 0.618, # Golden Ratio
 #out.width = "80%",
 fig.align = "center"
)
##
## https://stackoverflow.com/questions/36476751/associate-a-color-palette-with-ggplot2-theme
## 
my_colours <- c("#fd7f6f", "#7eb0d5", "#b2e061", "#bd7ebe", "#ffb55a", "#ffee65", "#beb9db", "#fdcce5", "#8bd3c7")
my_pastels <- c("#66C5CC","#F6CF71","#F89C74","#DCB0F2","#87C55F","#9EB9F3","#FE88B1","#C9DB74","#8BE0A4","#B497E7","#D3B484","#B3B3B3")
my_greys <- c("#000000", "#333333", "#666666","#999999", "#cccccc")
my_vivids <- c("#E58606","#5D69B1","#52BCA3","#99C945","#CC61B0","#24796C","#DAA51B","#2F8AC4","#764E9F","#ED645A","#CC3A8E","#A5AA99")

my_bolds <- c("#7F3C8D","#11A579","#3969AC","#F2B701","#E73F74","#80BA5A","#E68310","#008695","#CF1C90","#f97b72","#4b4b8f","#A5AA99")
  
```

#### Plot Fonts and Theme

```{r}
#| label: plot-theme
#| echo: fenced
#| cache: false
#| code-fold: true
#| messages: false
#| warning: false

library(showtext)
font_add(family = "Alegreya", regular = "../../../../fonts/Alegreya/Alegreya-Regular.ttf")
font_add(family = "Roboto Condensed", regular = "../../../../fonts/RobotoCondensed-Regular.ttf")
showtext_auto(enable = TRUE) #enable showtext
##
theme_custom <- function(){ 
    font <- "Alegreya"   #assign font family up front
    
    theme_classic(base_size = 14) %+replace%    #replace elements we want to change
    
    theme(
      text = element_text(family = font),  #set base font family
      
      #text elements
      plot.title = element_text(                 #title
                   family = "Alegreya",          #set font family
                   size = 18,                    #set font size
                   face = 'bold',                #bold typeface
                   hjust = 0,                    #left align
                   margin = margin(t = 5, r = 0, b = 5, l = 0)), #margin
      plot.title.position = "plot", 
      
      plot.subtitle = element_text(              #subtitle
                   family = "Alegreya",          #font family
                   size = 14,                   #font size
                   hjust = 0,                   #left align
                   margin = margin(t = 5, r = 0, b = 10, l = 0)), #margin
      
      plot.caption = element_text(               #caption
                   family = "Alegreya",          #font family
                   size = 9,                     #font size
                   hjust = 1),                   #right align
      
      plot.caption.position = "plot",            #right align
      
      axis.title = element_text(                 #axis titles
                   family = "Roboto Condensed",  #font family
                   size = 12),                   #font size
      
      axis.text = element_text(                  #axis text
                   family = "Roboto Condensed",  #font family
                   size = 9),                    #font size
      
      axis.text.x = element_text(                #margin for axis text
                    margin = margin(5, b = 10))
      
      #since the legend often requires manual tweaking 
      #based on plot content, don't define it here
    )
}

## Use available fonts in ggplot text geoms too!
ggplot2::update_geom_defaults(geom = "text",new = list(
  family = "Roboto Condensed",
  face = "plain",
  size = 3.5,
  color = "#2b2b2b"
)
)

## Set the theme
ggplot2::theme_set(new = theme_custom())

```




## {{< fa envelope title="An envelope" >}} Where does Data come from? {#sec-where-data}

We will need to form a basic understanding of basic scientific
enterprise. Let us look at the slides. (Also embedded below!)

{{< revealjs file = "https://r-for-artists.netlify.app/slides/10-nature-of-data/10-nature-of-data" >}}

```{r}
#| echo: false
#| eval: false
#| out-width: 780px
#| out-height: 640px
#| fig-align: center

knitr::include_url("https://r-for-artists.netlify.app/slides/10-nature-of-data/10-nature-of-data")

```

## {{< iconify mdi category-plus >}} What are Data Types?

::: {layout="[[40,-5, 40]]"}
{{< youtube dwFsRZv4oHA >}}

{{< youtube hZxnzfnt5v8 >}}
:::

```{r}
#| echo: false
knitr::include_graphics("../../../../../materials/images/fig-variables-1.png")

```

```{r}
#| echo: false
#| out-width: "680px"
#| out-height: "400px"
#| fig-align: "center"
knitr::include_graphics("./images/tidydata.jpg")

```

::: callout-important
## Tidy Data

Each **variable** is a column; a column contains *one kind* of data.
Each **observation** or **case** is a row.
:::

## {{< fa glasses >}} How do we Spot Data Variable Types? {#sec-data-types}

[By asking questions!]{style="background-color: yellow;"} Shown below is
a table of different kinds of questions you could use to query a
dataset. The variable or variables that "answer" the question would be
in the category indicated by the question.

::: column-page
```{r}
#| message: false
#| echo: false
#| warning: false
pronouns <- read_csv("pronouns.csv")
pronouns %>% kbl() %>%
  kable_paper("hover", full_width = T)
```
:::

As you go from [Qualitative to Quantitative data
types](https://openintro-ims.netlify.app/data-hello.html#variable-types)
in the table, I hope you can detect a movement from fuzzy
groups/categories to more and more crystallized numbers.

![Type of
Variables](/content/materials/images/Ratio-Interval-Ordinal-Nominal.PNG){fig-align="center"}

Each variable/scale can be subjected to the operations of the previous
group. In the words of [S.S.
Stevens](https://stats.idre.ucla.edu/other/mult-pkg/whatstat/what-is-the-difference-between-categorical-ordinal-and-interval-variables/)

> the basic operations needed to create each type of scale is
> cumulative: to an operation listed opposite a particular scale must be
> added all those operations preceding it.

## Some Examples of Data Variables

### Example 1: `AllCountries`

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
#### Base R

```{r}
#| echo: true

head(AllCountries,5) %>% arrange(desc(Internet))
```

#### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
head(AllCountries,5) %>% arrange(desc(Internet))
```
:::

::: callout-note
#### Questions

Q1. How many people in Andorra have internet access?\
A1. This leads to the `Internet` variable, which is a Quantitative
variable, a proportion.[^2] The answer is $70.5\%$.
:::

[^2]: How might this data have been obtained? By asking people in a
    survey and getting **Yes/No** answers!

### Example 2:`StudentSurveys`

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
#### Base R

```{r}
#| echo: true

head(StudentSurvey,5)

```

#### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| echo: false
#| column: body-outset-right
head(StudentSurvey,5)

```
:::

::: callout-note
## Questions

Q.1. *What kind* of students are these?\
A.1. The *variables* `Gender`, and `Year` both answer to this Question.
And they are both Qualitative/Categorical variables, of course.\
Q.2. *What is* their status in their respective families?\
A.2. Hmm...they are either first-born, or second-born, or third...etc.
While this is **recorded** as a number, it is **still a Qualitative**
variable[^3]! Think! Can you do math operations with `BirthOrder`? Like
`mean` or `median`?\
Q.3.**How big** are the families?\
A.3. Clearly, the variable that answers is `Siblings` and since the
question is synonymous with "how many", this is a Quantitative
variable.\
:::

[^3]: Qualitative variables are called *Factor variables* in R, and are
    stored, internally, as numeric variables together with their levels.
    The actual values of the numeric variable are 1, 2, and so on.

## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

Let us take a look at Wickham and Grolemund's Data Science workflow picture:

![Data Science Workflow](../../../../../materials/images/workflow.svg){#fig-datascience-workflow height="240px"}

So there we have it:

-   We import and clean the data
-   ***Questions*** lead us to identify Types of Variables (Quant and Qual)\
-   Sometimes we may need to transform the data (long to wide, summarize, create new variables...)
-   Further ***Questions*** lead to *relationships* between variables, which we describe using Data Visualizations\
-   Which is finally Communicated


You might think of all these Questions, Answers, Mapping as being
[equivalent to **metaphors** as a language in itself]{.black .bg-yellow}. And indeed, in R we use a philosophy called the **Grammar of Graphics**! We will use this grammar in the R graphics packages that we will encounter when we make Graphs next. Other parts of the Workflow (Transformation, Analysis and Modelling) are also following similar grammars, as we shall see. 

## {{< iconify eos-icons ai >}} AI Generated Summary and Podcast

This is a tutorial on data visualization using the R programming language. It introduces concepts such as data types, variables, and visualization techniques. The tutorial utilizes metaphors to explain these concepts, emphasizing the use of geometric aesthetics to represent data. It also highlights the importance of both visual and analytic approaches in understanding data. The tutorial then demonstrates basic chart types, including histograms, scatterplots, and bar charts, and discusses the "Grammar of Graphics" philosophy that guides data visualization in R. The text concludes with a workflow diagram for data science, emphasizing the iterative process of data import, cleaning, transformation, visualization, hypothesis generation, analysis, and communication.

<center>
```{r}
#| echo: false
embedr::embed_audio("../../../../../materials/audio/NatureOfData.wav")
``` 
</center>



## {{< iconify ooui references-ltr >}} References

1.  Randomized Trials:<br>

{{< youtube eGRd8jBdNYg >}} 
<br>

1.  Martyn Shuttleworth, Lyndsay T Wilson (Jun 26, 2009). *What is the Scientific Method?* Retrieved Mar 12, 2024 from Explorable.com: <https://explorable.com/what-is-the-scientific-method>
1.  Adam E.M. Eltorai, Jeffrey A. Bakal, Paige C. Newell, Adena J. Osband (editors). (March 22, 2023) *Translational Surgery: Handbook for Designing and Conducting Clinical and Translational Research*. A very lucid and easily explained set of chapters. ( I have a copy. Yes.)
      - Part III. Clinical: fundamentals
      - Part IV: Statistical principles
1.  <u><https://safetyculture.com/topics/design-of-experiments/></u>
1. Emi Tanaka. <https://emitanaka.org/teaching/monash-wcd/2020/week09-DoE.html>
1.  [Open Intro Stats: Types of
    Variables](https://openintro-ims.netlify.app/data-hello.html#variable-types)
1.  Lock, Lock, Lock, Lock, and Lock. *Statistics: Unlocking the Power
    of Data*, Third Edition, Wiley, 2021.
    <https://www.wiley.com/en-br/Statistics:+Unlocking+the+Power+of+Data,+3rd+Edition-p-9781119674160)>
1.  Claus Wilke. *Fundamentals of Data Visualization*.
    <https://clauswilke.com/dataviz/>
1.  Tim C. Hesterberg (2015). *What Teachers Should Know About the Bootstrap: Resampling in the Undergraduate Statistics Curriculum*, The American Statistician, 69:4, 371-386,
    <u><DOI:10.1080/00031305.2015.1089789></u>. <u>[PDF
    here](hesterberg2015.pdf)</u>
1. Albert Rapp. *Adding images to ggplot*. <https://albert-rapp.de/posts/ggplot2-tips/27_images/27_images>

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("ggformula", "mosaic", "Lock5Data",
           "TeachingDemos")
) %>%
  knitr::kable(format = "simple")

```
:::
