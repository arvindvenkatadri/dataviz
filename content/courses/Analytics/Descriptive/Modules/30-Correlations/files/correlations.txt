---
title: "Tutorial on Correlations in R"
author: "Arvind Venkatadri"
date: 22/Nov/2022
date-modified: "`r Sys.Date()`"
abstract: Tests, Tables, and Graphs for Correlations in R
bibliography: 
  - grateful-refs.bib
citation: true
#suppress-bibliography: true
---

## {{< iconify fxemoji japanesesymbolforbeginner >}} Introduction

We will create Tables for Correlations, and graphs for Correlations in
R. As always, we will consistently use the [**Project
Mosaic**](https://mosaic-web.org) ecosystem of packages in R (`mosaic`,
`mosaicData` and `ggformula`).

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: true

library(tidyverse)
library(mosaic) # package for stats, simulations, and basic plots
library(ggformula) # package for professional looking plots, that use the formula interface from mosaic
library(skimr)
library(GGally)
library(corrplot) # For Correlogram plots
library(broom) # to properly format stat test results

library(mosaicData) # package containing datasets
library(NHANES) # survey data collected by the US National Center for Health Statistics (NCHS)

```


```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(TeachHist)
library(TeachingDemos)
library(grateful)

```


[All R functions seen in the code are clickable links that take you to online documentation about the function. Try!]{.aside}

::: {.callout-tip style="background: beige"}
## The Formula interface

Note the standard method for all commands from the `mosaic` package:

`goal( y ~ x | z, data = mydata, â€¦)`

With `ggformula`, one can create any graph/chart using:

`gf_geometry(y ~ x | z, data = mydata)`

OR

`mydata %>% gf_geometry( y ~ x | z )`

The second method may be preferable, especially if you have done some
data manipulation first! More about this later!
:::

## {{< iconify pajamas issue-type-test-case >}} Case Study 1: Galton Dataset from `mosaicData`

Let us inspect what datasets are available in the package `mosaicData`.
Run this command in your Console:

```{r, eval=FALSE}
# Run in Console
data(package = "mosaicData")

```

The popup tab shows a lot of datasets we could use. Let us continue to
use the famous `Galton` dataset and `inspect` it:

```{r}
data("Galton")

```

### {{< iconify carbon chart-3d >}} Inspecting the Data

The `inspect` command already gives us a series of statistical measures
of different variables of interest. As discussed previously, we can
retain the output of `inspect` and use it in our reports: (there are
ways of dressing up these tables too)

```{r Galton-inspect}

galton_describe <- inspect(Galton)

galton_describe$categorical
galton_describe$quantitative

```

Try `help("Galton")` in your Console. The dataset is described as:

> A data frame with 898 observations on the following variables.\
> - `family` a factor with levels for each family\
> - `father` the father's height (in inches)\
> - `mother` the mother's height (in inches)\
> - `sex` the child's sex: F or M\
> - `height` the child's height as an adult (in inches)\
> - `nkids` the number of adult children in the family, or, at least,
> the number whose heights Galton recorded.

There is a lot of Description generated by the `mosaic::inspect()`
command ! Let us also look at the output of `skim`:

```{r}
#| column: body-outset-right
skimr::skim(Galton)

```

What can we say about the dataset and its variables? How big
is the dataset? How many variables? What types are they, Quant or Qual?
If they are Qual, what are the *levels*? Are they *ordered* levels?
Which variables could have relationships with others? Why?
Write down these Questions!

### {{< iconify icon-park-outline chart-histogram >}} Correlations and Plots

What Questions might we have, that we could answer with a Statistical
Measure, or Correlation chart?

::: callout-note
## Questions
How does children's `height` correlate with that of `father` and `mother`? Is this relationship also affected by `sex` of the child?

With this question, `height` becomes our target variable, which we should always plot on the *dependent* y-axis.
:::

```{r}
#| label: ggpairs-1
#| message: false

# Pulling out the list of Quant variables from NHANES
galton_quant <- galton_describe$quantitative
galton_quant$name

GGally::ggpairs(
  Galton,
  
  # Choose the variables we want to plot for
  columns = c("father", "mother", "height", "nkids"),
  
  switch = "both", # axis labels in more traditional locations
  progress = FALSE, # no compute progress messages needed
  
  # Choose the diagonal graphs (always single variable! Think!)
  diag = list(continuous = "barDiag"), # choosing histogram,not density
  
  # Choose lower triangle graphs, two-variable graphs
  lower = list(continuous = wrap("smooth", alpha = 0.1)),
  
  title = "Galton Data Correlations Plot"
) + 
  
  theme_bw()

```

We note that children's `height` is correlated with that of `father` and `mother`. The correlations are both positive, and that with `father` seems to be the larger of the two. ( Look at the slopes of the lines and the values of the correlation scores. )

::: callout-note
## Question
What if we group the Quant variables based on a Qual variable, like
`sex` of the child?
:::


```{r}
#| label: ggpairs-2 with groups
#| message: false

# Pulling out the list of Quant variables from NHANES
galton_quant <- galton_describe$quantitative
galton_quant$name

GGally::ggpairs(
  Galton,
  
  mapping = aes(colour = sex), # Colour by `sex`

  # Choose the variables we want to plot for
  columns = c("father", "mother", "height", "nkids"),
  switch = "both", # axis labels in more traditional locations
  progress = FALSE, # no compute progress messages needed
  
  diag = list(continuous = "barDiag"),
  
  # Choose lower triangle graphs, two-variable graphs
  lower = list(continuous = wrap("smooth", alpha = 0.1)),
  
  title = "Galton Data Correlations Plot"
) + 
  
  theme_bw()

```

The split scatter plots are useful, as is the split histogram for
`height`: Clearly the correlation of children's `height` with `father` and `mother` is positive for both `sex`-es. 
The other plots, and even some of the correlations scores are not all useful! Just shows everything we can compute is not necessarily useful immediately.

In later modules we will see how to plot correlations when the number of
variables is larger still.

::: callout-note
## Question
Can we plot a Correlogram for this dataset?
:::

```{r}
#library(corrplot)

galton_num_var <- Galton %>% select(father, mother, height, nkids)
galton_cor <- cor(galton_num_var)
galton_cor %>%
  corrplot(method = "ellipse",
           type = "lower",
           main = "Correlogram for Galton dataset")

```

Clearly `height` is positively correlated to `father` and `mother`;
interestingly, `height` is negatively correlated ( slightly) with
`nkids`.

::: callout-note
## Question
Let us confirm with a correlation test:
:::

We will use the `mosaic` function `cor_test` to get these results:

```{r}
#| column: body-outset-right
mosaic::cor_test(height ~ father, data = Galton) %>% 
  broom::tidy() %>% 
  knitr::kable(digits = 2,
               caption = "Children vs Fathers")

```

```{r}
#| column: body-outset-right
mosaic::cor_test(height ~ mother, data = Galton) %>% 
  broom::tidy() %>% 
    knitr::kable(digits = 2,
               caption = "Children vs Mothers")

```


::: callout-important
## Correlation Scores and Uncertainty

Note how the `mosaic::cor_test()` reports a correlation score `estimate` and the `p-value` for the same. There is also a `confidence interval` reported for the correlation score, an interval within which we are 95% sure that the
true correlation value is to be found. 

Note that `GGally::ggpairs()` too reports the *significance* of the correlation scores estimates using `***` or `**`. This indicates the p-value in the scores obtained by `GGally`; Presumably, there is an internal `cor_test` that is run for each pair of variables and the p-value and confidence levels are also computed internally.
:::


[In both cases, we used the formula $height \sim other-variable$, in keeping with our idea of `height` being the dependent, target variable.]{style="background-color: yellow;"}.

We also see the `p.value` for the `estimate`ed correlation is negligible, and the `conf.low`/`conf.high` interval does *not* straddle $0$. These attest to the **significance** of the correlation score. 

::: callout-note
## Question
What does this correlation look when split by `sex` of Child?
:::


```{r}
#| column: body-outset-right
#| results: hold
# For the sons

mosaic::cor_test(height ~ father,
                 data = Galton %>% filter(sex == "M")) %>% 
  broom::tidy() %>% knitr::kable(digits = 2,
                                 caption = "Sons vs Fathers")
cor_test(height ~ mother, 
         data = Galton %>% filter(sex == "M")) %>% 
  broom::tidy() %>% knitr::kable(digits = 2,
                                 caption = "Sons vs Mothers")

# For the daughters
cor_test(height ~ father, 
         data = Galton %>% filter(sex == "F")) %>% 
  broom::tidy() %>% knitr::kable(digits = 2,
                                 caption = "Daughters vs Fathers")
cor_test(height ~ mother, 
         data = Galton %>% filter(sex == "F")) %>% 
  broom::tidy() %>% knitr::kable(digits = 2,
                                 caption = "Daughters vs Mothers")
         
```
The same observation as made above ( `p.value` and  `confidence intervals`) applies here too and tells us that the estimated correlations are significant. 

### Visualizing Uncertainty in Correlation Estimates

We can also visualize this uncertainty and the confidence levels in a
plot too, using `gf_errorbar` and a handy set of functions within
`purrr` which is part of the tidyverse. Assuming `heights` is the
**target** variable we want to correlate every other (quantitative)
variable against, we can proceed very quickly as follows: we will first plot correlation uncertainty for **one pair** of variables to develop the intuition, and then for **all variables** against the *one target variable*:

```{r}
#| label: Single Correlation Uncertainty
mosaic::cor_test(height ~ mother, data = Galton) %>% 
  broom::tidy() %>% 

# We need a graph not a table 
# So comment out this line from the earlier code
#knitr::kable(digits = 2,caption = "Children vs Mothers")

rowid_to_column(var = "index") %>% # Need an index to plot with
  
  # Uncertainty as error-bars
  gf_errorbar(conf.high + conf.low ~ index, linewidth = 2) %>% 
  
  # Estimate as a point
  gf_point(estimate ~ index, color = "red", size = 6) %>% 
  
  # Labels
  gf_text(estimate ~ index - 0.2, 
             label = "Correlation Score = estimate") %>% 
  gf_text(conf.high*0.98 ~ index - 0.25, 
           label = "Upper Limit = estimate + conf.high") %>%   
  gf_text(conf.low*1.04 ~ index - 0.25, 
           label = "Lower Limit = estimate - conf.low") %>% 
  gf_theme(theme_bw())

```

We can now do this for all variables against the target variable `height`, which we identified in our research question. We will use the iteration capabilities offered by the `tidyverse` package, `purrr`:

```{r}
#| label: corrtest plots

all_corrs <- Galton %>% 
  select(where(is.numeric)) %>% 
  
  # leave off height to get all the remaining ones
  select(- height) %>%  
  
  # perform a cor.test for all variables against height
  purrr::map(.x = .,
             .f = \(x) cor.test(x, Galton$height)) %>%
  
  # tidy up the cor.test outputs into a tidy data frame
  map_dfr(broom::tidy, .id = "predictor") 

all_corrs

all_corrs %>% 
  
  # arrange the predictors in order of their correlation scores
  # with the target variable (`height`)
  # Add errorbars to show uncertainty ranges / confidence intervals
  # Use errorbar width and linewidth fo emphasis
  gf_errorbar(conf.high + conf.low ~ reorder(predictor, estimate),
              color = ~ estimate,
              width = 0.2,
              linewidth = ~ -log10(p.value)) %>% 
  
  # All correlation estimates as points
  gf_point(estimate ~ reorder(predictor, estimate), 
           color = "black") %>% 
  
  # Reference line at zero correlation score
  gf_hline(yintercept = 0, color = "grey", linewidth = 2) %>% 
  
  # Themes,Titles, and Scales
  gf_labs(x = NULL, y = "Correlation with height in Galton", 
          caption = "Significance = - log10(p.value)") %>% 
  
  gf_refine(
    
    # Scale for colour
 scale_colour_distiller("Correlation", type = "div", palette = "RdBu"),
            
    # Scale for dumbbells!!
    scale_linewidth_continuous("significance",
                                       range = c(0.5,4))) %>% 
  gf_refine(guides(linewidth = guide_legend(reverse = TRUE))) %>%
  gf_theme(theme_classic())

```

We can clearly see the size of the correlations and the confidence
intervals marked in this plot. `father` has somewhat greater correlation
with children's `height`, as compared to `mother`. `nkids` seems to
matter very little. This kind of plot will be very useful when we pursue
linear regression models.

::: callout-note
## Question
How can we show this correlation in a set of Scatter Plots +
Regression Lines? Can we recreate Galton's famous diagram?
:::

```{r}
#| layout-ncol: 2
# For the sons
gf_point(height ~ father, 
         data = Galton %>% filter(sex == "M"),
         title = "Soms and Fathers") %>%
  gf_smooth(method = "lm") %>%
  gf_theme(theme_minimal())

gf_point(height ~ mother, 
         data = Galton %>% filter(sex == "M"),
         title = "Sons and Mothers") %>%
  gf_smooth(method = "lm") %>%
  gf_theme(theme_minimal())

# For the daughters
gf_point(height ~ father, 
         data = Galton %>% filter(sex == "F"),
         title = "Daughters and Fathers") %>%
  gf_smooth(method = "lm") %>%
  gf_theme(theme_minimal())

gf_point(height ~ mother, 
         data = Galton %>% filter(sex == "F"),
         title = "Daughters and Mothers") %>%
  gf_smooth(method = "lm") %>% 
  gf_theme(theme_minimal())

```

An approximation to Galton's famous plot[^1] (see Wikipedia):

```{r}
#| column: margin
#| echo: false
knitr::include_graphics("http://euclid.psych.yorku.ca/SCS/Gallery/images/galton-corr.jpg")
```

```{r}
#| layout-ncol: 2
gf_point(height ~ (father + mother)/2, data = Galton) %>% 
  gf_smooth(method = "lm") %>% 
  gf_density_2d(n = 8) %>% 
  gf_abline(slope = 1) %>% 
  gf_theme(theme_minimal())

gf_point(height ~ (father + mother)/2, data = Galton) %>% 
  gf_smooth(method = "lm") %>% 
  gf_ellipse(level = 0.95, color = "red") %>% 
    gf_ellipse(level = 0.75, color = "blue") %>% 
    gf_ellipse(level = 0.5, color = "green") %>% 
  gf_abline(slope = 1) %>% 
  gf_theme(theme_minimal())

```

How would you interpret this plot[^2]?

## {{< iconify pajamas issue-type-test-case >}} Case Study#2: Dataset from `NHANES`

Let us look at the `NHANES` dataset from the package `NHANES`:

```{r}
data("NHANES")

```

### {{< iconify carbon chart-3d >}} Inspecting the Data

```{r}
#| label:  NHANES-inspect
#| layout-ncol: 3
#| column: body-outset-right

NHANES_describe <- inspect(NHANES)

NHANES_describe$categorical
NHANES_describe$quantitative
NHANES
skimr::skim(NHANES)

```

[Try `help("NHANES")` in your Console.]{.aside}

> This is survey data collected
by the US National Center for Health Statistics (NCHS) which has
conducted a series of health and nutrition surveys since the early
1960's. Since 1999 approximately 5,000 individuals of all ages are
interviewed in their homes every year and complete the health
examination component of the survey. The health examination is conducted
in a mobile examination centre (MEC).

The dataset is described as: A data frame with 100000 observations on 76
variables. Some of these are: \
 - `Race1` and `Race2`: factors with 5 and 6 levels respectively\
 - `Education` a factor with 5 levels\
 - `HHIncomeMid` Total annual gross income for the household in US
dollars.\
 - `Age`\
 - `BMI`: Body mass index (weight/height2 in kg/m2)\
 - `Height`: Standing height in cm.\
 - `Weight`: Weight in kg \> \> - `Testosterone`: Testosterone total
(ng/dL)
 - `PhysActiveDays`: Number of days in a typical week that
participant does moderate or vigorous-intensity activity.\
 - `CompHrsDay`: Number of hours per day on average participant used a
computer or gaming device over the past 30 days.

::: callout-important
## Missing Data
Why do so many of the variables have missing entries? What could be your guess about the Experiment/Survey`?
:::

Let us make some counts of the data, since we have so many `factors`:

```{r}
NHANES %>% count(Gender)
NHANES %>% count(Race1)
NHANES %>% count(Race3)
NHANES %>% count(Education)
NHANES %>% count(MaritalStatus)
```

There is a good mix of factors and counts.

Now we articulate our Research Questions:

::: callout-note
### Research Questions

1.  Does `Testosterone` have a relationship with parameters such as
    `BMI`, `Weight`, `Height`, `PhysActiveDays` `CompHrsDay` and `Age`?
    
2.  Does `HHIncomeMid` have a relationship with these same parameters? And with `Gender`?

3. Are there any other pairwise correlations that we should note? (This is especially useful in choosing independent variables for multiple regression)
:::

( Yes we are concerned with men more than with the women, sadly.)


### {{< iconify icon-park-outline chart-histogram >}} Correlations and Plots


```{r}
#| message: false
#| warning: false
#| label: "Household Median Income"

GGally::ggpairs(NHANES, 
                # Choose the variables we want to plot for
                columns = c("HHIncomeMid", "Weight", "Height", 
                            "BMI", "Gender"), 
                
                # LISTs of graphs needed at different locations
                # For different combinations of variables 
                diag = list(continuous = "barDiag"),
                lower = list(continuous = wrap("smooth", alpha = 0.01)),
                upper = list(continuous = "cor"),
                
                switch = "both", # axis labels in more traditional locations
                progress = FALSE ) + # No compute progress bars needed
  theme_bw()


```

We see that `HHIncomeMid` is Quantitative, discrete valued variable, since it is based on a set of median incomes for different ranges of income. `BMI`, `Weight`, `Height` are continuous Quant variables.

`HHIncomeMid` also seems to be relatively unaffected by `Weight`; And is only mildly correlated with `Height` and `BMI`, as seen both by the correlation score magnitudes and the slopes of the trend lines. 

There is a difference in the median income by `Gender`, but we will defer that kind of test for later, when we do Statistical Inference. 

Unsurprisingly, `BMI` and `Weight` have a strong relationship, as do `Height` and `Weight`; the latter is of course non-linear, since the `Height` levels off at a point. 

```{r}
#| label: Testosterone
#| message: false
#| warning: false

GGally::ggpairs(NHANES, 
                columns = c("Testosterone", "Weight", "Height", "BMI"), 
                
                diag = list(continuous = "barDiag"),
                lower = list(continuous = wrap("smooth", alpha = 0.01)),
                upper = list(continuous = "cor"),
                
                switch = "both",
                progress = FALSE ) +
  theme_bw()

```

It is clear that `Testosterone` has strong relationships with `Height` and `Weight` but not so much with `BMI`. 

### {{< iconify carbon chart-error-bar-alt >}} Visualizing Uncertainty in Correlation Estimates

Since the pairs plot is fairly clear for both target variables, let us head to visualizing the significance and uncertainty in the correlation estimates.


```{r}
#| label: NHANES errorbars-1

HHIncome_corrs <- NHANES %>% 
  select(where(is.numeric)) %>% 
  
  # leave off height to get all the remaining ones
  select(- HHIncomeMid) %>%  
  
  # perform a cor.test for all variables against height
  purrr::map(.x = .,
             .f = \(x) cor.test(x, NHANES$HHIncomeMid)) %>%
  
  # tidy up the cor.test outputs into a tidy data frame
  map_dfr(broom::tidy, .id = "predictor") 

HHIncome_corrs

HHIncome_corrs %>% 
  
  # Reference line at zero correlation score
  gf_hline(yintercept = 0, color = "grey", linewidth = 2) %>% 
  
  # arrange the predictors in order of their correlation scores
  # with the target variable (`height`)
  # Add errorbars to show uncertainty ranges / confidence intervals
  # Use errorbar width and linewidth fo emphasis
  gf_errorbar(conf.high + conf.low ~ reorder(predictor, estimate),
              color = ~ estimate,
              width = 0.2,
              linewidth = ~ -log10(p.value + 0.001)) %>% 
  
  # All correlation estimates as points
  gf_point(estimate ~ reorder(predictor, estimate), 
           color = "black") %>% 
  
  # Themes,Titles, and Scales
  gf_labs(x = NULL, y = "Correlations with HouseHold Median Income", 
          caption = "Significance = - log10(p.value)") %>% 
  gf_theme(theme_classic()) %>%

  
  # Scale for colour
  gf_refine(guides(linewidth = guide_legend(reverse = TRUE)),
            scale_colour_distiller("Correlation", type = "div", 
                                    palette = "RdBu"),
            
  # Scale for dumbbells!!
  scale_linewidth_continuous("Significance", range = c(0.05,2)),
  
  theme(axis.text.y = element_text(size = 6, hjust = 1)),
  coord_flip()) 

```

If we select just the variables from our Research Question:


```{r}
#| label: NHANES errorbars-2

HHIncome_corrs_select <- NHANES %>% 
  select(Height, Weight, BMI) %>% # Only change is here!
  
  # leave off height to get all the remaining ones
  #select(- HHIncomeMid) %>%  
  
  # perform a cor.test for all variables against height
  purrr::map(.x = .,
             .f = \(x) cor.test(x, NHANES$HHIncomeMid)) %>%
  
  # tidy up the cor.test outputs into a tidy data frame
  map_dfr(broom::tidy, .id = "predictor") 

HHIncome_corrs_select

HHIncome_corrs_select %>% 
  
  # arrange the predictors in order of their correlation scores
  # with the target variable (`height`)
  # Add errorbars to show uncertainty ranges / confidence intervals
  # Use errorbar width and linewidth fo emphasis
  gf_errorbar(conf.high + conf.low ~ reorder(predictor, estimate),
              color = ~ estimate,
              width = 0.2,
              linewidth = ~ -log10(p.value + 0.000001)) %>% 
  
  # All correlation estimates as points
  gf_point(estimate ~ reorder(predictor, estimate), 
           color = "black") %>% 
  
  # Reference line at zero correlation score
  gf_hline(yintercept = 0, color = "grey", linewidth = 2) %>% 
  
  # Themes,Titles, and Scales
  gf_labs(x = NULL, y = "Correlations with HouseHold Median Income", 
          caption = "Significance = - log10(p.value + 0.000001)") %>% 
  
  gf_theme(theme_classic()) %>%

  
  # Scale for colour
  gf_refine(guides(linewidth = guide_legend(reverse = TRUE)),
            scale_colour_distiller("Correlation", type = "div", 
                                    palette = "RdBu"),
            
  # Scale for dumbbells!!
  scale_linewidth_continuous("Significance", range = c(0.05,2)),
  
  theme(axis.text.y = element_text(size = 8, hjust = 1)),
  coord_flip()) 

```

So we might say taller people make more money? And fatter people make slightly less money? Well, the **magnitude** of the correlations (aka *effect size*) are low so we would not imagine this to be a hypothesis that we can defend. 

Let us look at the `Testosterone` variable: trying all variables shows some paucity of observations ( due to missing data), so we will stick with our chosen variables:


```{r}
#| label: testosterone errorbars


Testosterone_corrs <- NHANES %>%
  select(Height, Weight, BMI) %>%
  
  # leave off height to get all the remaining ones
  #select(- Testosterone) %>%
  
  # perform a cor.test for all variables against height
  purrr::map(.x = .,
             .f = \(x) cor.test(x, NHANES$Testosterone)) %>%
  
  # tidy up the cor.test outputs into a tidy data frame
  map_dfr(broom::tidy, .id = "predictor")

Testosterone_corrs

Testosterone_corrs %>%
  
  # Reference line at zero correlation score
  gf_hline(yintercept = 0,
           color = "grey",
           linewidth = 2) %>%
  
  # arrange the predictors in order of their correlation scores
  # with the target variable (`height`)
  # Add errorbars to show uncertainty ranges / confidence intervals
  # Use errorbar width and linewidth fo emphasis
  gf_errorbar(
    conf.high + conf.low ~ reorder(predictor, estimate),
    color = ~ estimate,
    width = 0.2,
    linewidth = ~ -log10(p.value + 0.000001)
  ) %>%
  
  # All correlation estimates as points
  gf_point(estimate ~ reorder(predictor, estimate),
           color = "black") %>%
  
  
  # Themes,Titles, and Scales
  gf_labs(x = NULL, y = "Correlations with Testosterone Levels",
          caption = "Significance = - log10(p.value + 0.000001)") %>%
  
  gf_theme(theme_classic()) %>%
  
  
  # Scale for colour
  gf_refine(
    guides(linewidth = guide_legend(reverse = TRUE)),
    scale_colour_distiller("Correlation", type = "div",
                           palette = "RdBu"),
    
    # Scale for dumbbells!!
    scale_linewidth_continuous("Significance", range = c(0.05, 2)),
    
    theme(axis.text.y = element_text(size = 8, hjust = 1)),
    coord_flip()
  ) 

```


## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

We have a decent Correlations related *workflow* in R:

-   Load the dataset
-   `inspect/skim/glimpse` the dataset, identify Quant and Qual variables
-   Identify a *target* variable based on your knowledge of the data, how it was gathered, who gathered it and what was their intent
-   Develop Pair-Wise plots + Correlations using `GGally::ggpairs()`
-   Develop Correlogram `corrplot::corrplot`
-   Check everything with a `cor_test`: effect size,significance, confidence intervals
-   Use `purrr` + `cor.test` to plot correlations and confidence
    intervals for multiple Quant predictor variables against the target variable
-   Plot scatter plots using `gf_point`.
-   Add extra lines using `gf_abline()` to compare hypotheses that you
    may have.
    
## {{< iconify ooui references-rtl >}} References

::: {#refs style="font-size: 60%;"}


###### {{< iconify lucide package-check >}} R Package Citations


```{r}
#| echo: false
# scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("corrplot", "GGally", "ggformula","mosaic", "mosaicData", "NHANES", "TeachHist", "TeachingDemos")
) %>%
  knitr::kable(format = "simple")

```

:::

[^1]: http://euclid.psych.yorku.ca/SCS/Gallery/images/galton-corr.jpg\>

[^2]: https://www.researchgate.net/figure/Galtons-smoothed-correlation-diagram-for-the-data-on-heights-of-parents-and-children_fig15_226400313
